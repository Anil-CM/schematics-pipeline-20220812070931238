---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: schematics-workspace-setup
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: repository
      description: The git repo
    - name: branch
      description: the branch for the git repo
      default: "main"
    - name: revision
      description: the git revision/commit for the git repo
      default: ""
    - name: devops-apikey
      description: The IBM Cloud API key
    - name: workspace-id
      description: Schematics Workspace ID
    - name: terraform-request
      description: The Terraform request body
    - name: console-solutions-api
      description: The endpoint URL for the Console Solutions API
      default: "https://cloud.ibm.com/solutions-api"
    - name: pipeline-debug
      default: "0"
  results:
    - name: repo-url
      description: The URL of the repo containing the terraform template files
  workspaces:
    - name: artifacts
      description: A workspace
      mountPath: /artifacts
  steps:
    - name: push-tf-template-files
      image: ibmcom/pipeline-base-image:2.12
      workingDir: /artifacts
      env:
        - name: ibmcloud-api
          value: $(params.ibmcloud-api)
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
        - name: revision
          value: $(params.revision)
        - name: devops-apikey
          value: $(params.devops-apikey)
        - name: workspace-id
          value: $(params.workspace-id)
        - name: terraform-request
          value: $(params.terraform-request)
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)
        - name: PIPELINE_RUN_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']
        - name: CONSOLE_SOLUTIONS_API
          value: $(params.console-solutions-api)
      script: |
        #!/bin/bash
        set -e -o pipefail

        if [ $PIPELINE_DEBUG == 1 ]; then
          env
          pwd
          ls -l
          trap env EXIT
          set -x
        fi

        ZIP_NAME="tf-template.zip"

        # check if we've already done the initial push. dont re-add files if we have.
        cd /artifacts/schematics-workspace-$(params.workspace-id)
        if [ ! -f ./main.tf ] && [ ! -f ./provider.tf ] && [ ! -f ./variables.tf ]; then
          # log into Cloud
          ibmcloud login -a $(params.ibmcloud-api) --no-region --apikey $(params.devops-apikey)
          TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')

          # d/l the terraform template files from console solutions API
          TF_REQ=$(echo $(params.terraform-request) | base64 -d)
          RESPONSE=$(curl -X 'POST' -s "$CONSOLE_SOLUTIONS_API/v1/template/zip" \
            -H 'accept: application/zip' -H 'content-type: application/json' -H "Authorization: $TOKEN" -d "$TF_REQ" --output $ZIP_NAME -w "%{http_code}")
          if [ $RESPONSE == "200" ]; then
            unzip $ZIP_NAME
            ls -al
            rm ./$ZIP_NAME
            # push files to the repository
            git config --global user.email "devops-cloud-ibm@example.com"
            git config --global user.name "IBM Cloud DevOps Toolchain - schematics-workspace-pipeline"
            git add *.tf
            git commit -m "feat: terraform template files for workspace $(params.workspace-id)"
            git push
          else
            echo "Received unexpected response $RESPONSE when downloading Terraform template files"
            exit 1
          fi
        else
          echo "Terraform template files already downloaded and pushed to the repository"
        fi

        # Record task results
        echo -n "$(params.repository)" > $(results.repo-url.path)
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /artifacts/_toolchain.json
          subPath: toolchain.json
          name: cd-config-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
